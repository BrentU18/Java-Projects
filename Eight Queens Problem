//@BrentU18
import java.util.Arrays;

public class EightQueens2 {

        public static boolean validRow(int[][] board, int row, int col) {
            return rowValid(board, row, col) &&
                    upValid(board, row, col) &&
                    downValid(board, row, col);
        }
        private static boolean downValid(int[][] board, int row, int col) {
            for (int i = 0; col - i >= 0 && row + i < board.length ; i++) {
                if (board[row + i][col - i] == 1) {
                    return false;
                }
            }
            return true;
        }
        private static boolean upValid(int[][] board, int row, int col) {
            for (int i = 0; col - i >= 0 && row - i >= 0; i++) {
                if (board[row - i][col-i] == 1) {
                    return false;
                }
            }
            return true;
        }
        private static boolean rowValid(int[][] board, int row, int col) {
            for (int i = 0; col - i >= 0; i++) {
                if (board[row][col - i] == 1) {
                    return false;
                }
            }
            return true;
        }
        public static boolean solve(int[][] board, int col) {
            if (col == board.length) {
                return true;
            }
            for (int row = 0; row < board.length; row++) {
                if (validRow(board, row, col)) {
                    board[row][col] = 1;
                    if (solve(board, col + 1) == true) {
                        return true;
                    }
                    board[row][col] = 0;
                }
            }
            return false;
        }
        public static void main(String[] args) {
            int[][] board = new int[8][8];
            solve(board, 0);
            for (int[] row : board) {
                System.out.println(Arrays.toString(row));
            }
        }
    }
